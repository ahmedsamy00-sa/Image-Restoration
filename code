import cv2
import numpy as np
import matplotlib.pyplot as plt
import os

# Load the images
image_path = 'C:/Users/DAR-M/.spyder-py3/hh/hh'
CATEGORIES = ['old']

for category in CATEGORIES:
    path = os.path.join(image_path, category)
    for img_name in os.listdir(path):
        img_path = os.path.join(path, img_name)
        img_array = cv2.imread(img_path, cv2.IMREAD_COLOR)  # Use cv2.IMREAD_COLOR instead of cv2.IMREAD_GRAYSCALE

        if img_array is None:
            print(f"Error: Unable to load the image {img_name}.")
        else:
            # Denoise the image using fastNlMeansDenoisingColored
            denoised_image = cv2.fastNlMeansDenoisingColored(img_array, None, h=8, hColor=7, templateWindowSize=7, searchWindowSize=21)

            # Apply Canny edge detection
            edges = cv2.Canny(denoised_image, threshold1=20, threshold2=90)

            # Apply sharpening filter
            kernel = np.array([[-1, -1, -1],
                                     [-1, 9, -1],
                                     [-1, -1, -1]])
            sharpened_image = cv2.filter2D(denoised_image, -1, kernel)

            # Convert to grayscale
            gray_image = cv2.cvtColor(denoised_image, cv2.COLOR_BGR2GRAY)

            # Apply histogram equalization for contrast enhancement
            equalized_image = cv2.equalizeHist(gray_image)

            # Display the original, denoised, edge-detected, and enhanced images
            cv2.imshow("Original Image", cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB))
            cv2.imshow("Denoised Image", cv2.cvtColor(denoised_image, cv2.COLOR_BGR2RGB))
            cv2.imshow("Edge Detection", edges)
            cv2.imshow("Sharpened Image", cv2.cvtColor(sharpened_image, cv2.COLOR_BGR2RGB))  # Added sharpened image
            cv2.imshow("Contrast Enhanced Image", equalized_image)  # Updated title
            
            cv2.waitKey(0)  # Wait until a key is pressed

# Close all windows after the loop ends
cv2.destroyAllWindows()
